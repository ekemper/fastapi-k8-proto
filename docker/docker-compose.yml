version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fastapi_k8_proto
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_k8_proto
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ../logs:/app/logs
      - ../app:/app/app
      - ../alembic:/app/alembic
      - ../alembic.ini:/app/alembic.ini
      - ../tests:/app/tests
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "alembic upgrade head &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_k8_proto
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ../logs:/app/logs
      - ../app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2

  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    ports:
      - "5555:5555"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLOWER_UNAUTHENTICATED_API=1
    volumes:
      - ../logs:/app/logs
    depends_on:
      - redis
    command: celery -A app.workers.celery_app flower --port=5555
  frontend:
      build:
        context: ./frontend
        dockerfile: Dockerfile
        target: development
      ports:
        - "5173:5173"
      depends_on:
        - backend
      restart: unless-stopped
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:5173"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 15s
      volumes:
        - ./frontend:/app
        - /app/node_modules
      environment:
        - NODE_ENV=development
      command: ["npm", "run", "dev", "--", "--host", "--port", "5173"]
      
volumes:
  postgres_data:
  logs:
    driver: local 